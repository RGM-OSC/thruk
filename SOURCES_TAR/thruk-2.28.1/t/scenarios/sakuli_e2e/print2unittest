#!/usr/bin/env perl

use strict;
use warnings;
use Time::HiRes qw/gettimeofday tv_interval/;

$| = 1;
my $quiet = ($ARGV[0] && $ARGV[0] eq '-q') ? 1 : 0;

my $cur_case_logs   = [];
my $errored         = 0;
my $case_num        = 0;
my $cur_case_num    = 0;
my $print_result    = 0;
my $in_results      = 0;
my $exitcode        = 0;
my $min_similarity  = [-1 , ""];
my $last_case;
my $counting_cases;
my $case_start;
my $starttime = [gettimeofday];
while(my $line = <STDIN>) {
    # just skip empty lines
    if($line =~ m|^[\s\.]+$|mx) {}
    elsif($line =~ m%^(WARN|INFO).*\]\s+\-\s*$%mx) {}
    elsif($line =~ m%^(USER_ID|nss_wrapper|JVM_HEAP_XMX|set|umask)%mx) {}
    elsif($line =~ m/^[\-\s]*$/mx) {}
    elsif($line =~ m/^\-+.*_JAVA_OPTIONS/mx) {}
    elsif($line =~ m/(_sahi\.setServerVar|for\ sahi\ refresh|sahi\-proxy\-timer|loaded\ image)/mx) {}
    elsif($line =~ m|SAKULI_RETURN_VAL:\s+(\d+)|mx) {
        $exitcode = $1;
        print $line unless $quiet;
    }
    elsif($line =~ m|SKIP:|mx && $line !~ m/\Q - _log(\E/mx) {
        $line =~ s/^.*SKIP:/SKIP:/gmx;
        print $line;
    }
    # number of cases
    # number of cases
    elsif($line =~ m|\Qread test suite information of file\E|mx) {
        $counting_cases = 1;
    }
    elsif($counting_cases) {
        if($line =~ m|\QEnd of File\E|mx) {
            $counting_cases = 0;
        } else {
            $case_num++;
        }
    }
    # start of case
    elsif($line =~ m|\QNow start to execute the test case \E'(.*)'|mx) {
        $cur_case_num++;
        _print_end_case() if $last_case;
        $last_case = $1;
        printf("%02d/%02d ", $cur_case_num, $case_num) if $case_num > 1;
        printf("%s ", $last_case);
        $cur_case_logs = [];
        $errored = 0;
        $case_start = [gettimeofday];
    }
    # case results
    elsif($line =~ m|=+\s+test\s+case\s+"([^"]+)"\s+ended\s+with\s+(.*?)\s=+|mx) {
        my $res = $2;
        _print_end_case() if $last_case;
        $last_case = "";
        if($res ne 'OK') {
            $print_result = 1;
        } else {
            $print_result = 0;
        }
        print $line unless $quiet;
        $in_results = 1;
    }
    # end of tests
    elsif($line =~ m|^===|mx) {
        _print_end_case() if $last_case;
        $last_case = "";
        print $line unless $quiet;
        $in_results = 1;
    }
    # inside case
    elsif($last_case) {
        push @{$cur_case_logs}, $line;

        if($line =~ m/Region\.waitForImage/) {
            my($img, $similarity);
            if($line =~ m/.*\[(.*?)\]/m) {
                $img = $1;
                $img =~ s/,.*$//;
            }
            if($line =~ m/S:([\d\.]+)\s+/m) {
                $similarity = $1;
            }
            if($img && $similarity && ($min_similarity->[0] == -1 || $min_similarity->[0] > $similarity)) {
                $min_similarity = [$similarity, $img];
            }
        }

        if($line =~ m/\QCertificate not found:\E/mx)    {}
        elsif($line =~ m/^----\s*$/mx)                  {}
        elsif($line =~ m/^WARN\s+/mx)                   {}
        elsif($line =~ m/^\s+at\s+/mx)                  {}
        elsif($line =~ m/^\s*Caused\ by:/mx)            {}
        elsif($line =~ m/^\s+\.\.\.\ /mx)               {}
        elsif($errored || $line !~ m/^INFO\s+/mx) {
            if(!$errored) {
                print "ERROR\n";
                # print backlog for this case
                print(join("", @{$cur_case_logs}));
            } else {
                print "\n";
            }
            print $line;
            $errored = 1;
        } else{
            print ".";
        }
    } else {
        if(!$in_results || $print_result) {
            print $line;
        }
    }
}
if($min_similarity->[0] != -1) {
    printf("Minimum similarity: %s in file %s\n", @{$min_similarity});
}
my $elapsed = tv_interval($starttime);
printf("Last case: %s\n", $last_case) if $last_case;
printf("Finished in %.1fs", $elapsed) if $case_num > 1;
exit($exitcode);

sub _print_end_case {
    my $elapsed = tv_interval($case_start);
    print "OK" unless $errored;
    printf(" (took %.1fs)", $elapsed);
    print "\n";
    if($errored) {
        exit($exitcode) if $exitcode;
        exit(1);
    }
}
