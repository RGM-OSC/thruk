SHELL=bash
export THRUK_CONFIG=$(shell pwd)
export TEST_AUTHOR=1
THRUK=cd ../../.. && ./script/thruk
STARTUPWAIT=300
EXPECTED_BACKENDS=1

wait_start:
	$(THRUK) cache clean
	for x in $$(seq $(STARTUPWAIT)); do \
	   if [ $$($(THRUK) -l 2>&1 | grep -v ^Def | grep -v ^- | grep -v ERROR | grep OK | wc -l) -eq $(EXPECTED_BACKENDS) ]; then break; else sleep 1; fi; \
	   if [ $$x -eq $(STARTUPWAIT) ]; then echo "ERROR: startup failed"; docker ps; $(THRUK) -l; exit 1; fi; \
	done
	$(THRUK) -l
	$(MAKE) extra_wait_start

test: wait_start
	cd ../../.. && PERL_DL_NONLAZY=1 /usr/bin/env perl "-MExtUtils::Command::MM" "-e" "test_harness(0)" $(shell pwd)/t/*.t
	$(MAKE) extra_test

test_verbose: wait_start
	cd ../../.. && PERL_DL_NONLAZY=1 /usr/bin/env perl "-MExtUtils::Command::MM" "-e" "test_harness(1)" $(shell pwd)/t/*.t
	$(MAKE) extra_test

server:
	cd ../../.. && THRUK_PERFORMANCE_DEBUG=1 ./script/thruk_server.pl -r

prepare:
	docker-compose build
	docker-compose up --remove-orphans -d
	docker ps
	$(MAKE) extra_prepare

clean:
	docker-compose kill
	docker-compose rm -f
	-docker network prune -f
	-[ $$(docker ps -q | wc -l) -eq 0 ] || docker kill $$(docker ps -q)
	$(MAKE) extra_clean

update:
	docker-compose pull
	for IMG in $$(grep FROM */Dockerfile | awk '{ print $$2 }' | sort -u); do docker pull $$IMG; done

extra_wait_start:

extra_clean:

extra_prepare:

extra_test:
